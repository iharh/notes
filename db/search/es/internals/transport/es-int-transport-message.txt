public abstract class TransportMessage<TM extends TransportMessage<TM>> extends ContextHolder implements Streamable {

    private Map<String, Object> headers;

    private TransportAddress remoteAddress;

    protected TransportMessage() {
    }

    protected TransportMessage(TM message) {
        // create a new copy of the headers/context, since we are creating a new request
        // which might have its headers/context changed in the context of that specific request

        if (((TransportMessage<?>) message).headers != null) {
            this.headers = new HashMap<>(((TransportMessage<?>) message).headers);
        }
        copyContextFrom(message);
    }

    public void remoteAddress(TransportAddress remoteAddress) {
        this.remoteAddress = remoteAddress;
    }

    public TransportAddress remoteAddress() {
        return remoteAddress;
    }

    @SuppressWarnings("unchecked")
    public final TM putHeader(String key, Object value) {
        if (headers == null) {
            headers = new HashMap<>();
        }
        headers.put(key, value);
        return (TM) this;
    }

    @SuppressWarnings("unchecked")
    public final <V> V getHeader(String key) {
        return headers != null ? (V) headers.get(key) : null;
    }

    public final boolean hasHeader(String key) {
        return headers != null && headers.containsKey(key);
    }

    public Set<String> getHeaders() {
        return headers != null ? headers.keySet() : Collections.<String>emptySet();
    }

    @Override
    public void readFrom(StreamInput in) throws IOException {
        headers = in.readBoolean() ? in.readMap() : null;
    }

    @Override
    public void writeTo(StreamOutput out) throws IOException {
        if (headers == null) {
            out.writeBoolean(false);
        } else {
            out.writeBoolean(true);
            out.writeMap(headers);
        }
    }
}

common.io.stream.

public interface Streamable {
    void readFrom(StreamInput in) throws IOException;
    void writeTo(StreamOutput out) throws IOException;
}


common.

public class ContextHolder {

    private ObjectObjectOpenHashMap<Object, Object> context;

    /**
     * Attaches the given value to the context.
     *
     * @return  The previous value that was associated with the given key in the context, or
     *          {@code null} if there was none.
     */
    @SuppressWarnings("unchecked")
    public final synchronized <V> V putInContext(Object key, Object value) {
        if (context == null) {
            context = new ObjectObjectOpenHashMap<>(2);
        }
        return (V) context.put(key, value);
    }

    /**
     * Attaches the given values to the context
     */
    public final synchronized void putAllInContext(ObjectObjectAssociativeContainer<Object, Object> map) {
        if (map == null) {
            return;
        }
        if (context == null) {
            context = new ObjectObjectOpenHashMap<>(map);
        } else {
            context.putAll(map);
        }
    }

    /**
     * @return  The context value that is associated with the given key
     *
     * @see     #putInContext(Object, Object)
     */
    @SuppressWarnings("unchecked")
    public final synchronized <V> V getFromContext(Object key) {
        return context != null ? (V) context.get(key) : null;
    }

    /**
     * @param defaultValue  The default value that should be returned for the given key, if no
     *                      value is currently associated with it.
     *
     * @return  The value that is associated with the given key in the context
     *
     * @see     #putInContext(Object, Object)
     */
    @SuppressWarnings("unchecked")
    public final synchronized <V> V getFromContext(Object key, V defaultValue) {
        V value = getFromContext(key);
        return value == null ? defaultValue : value;
    }

    /**
     * Checks if the context contains an entry with the given key
     */
    public final synchronized boolean hasInContext(Object key) {
        return context != null && context.containsKey(key);
    }

    /**
     * @return  The number of values attached in the context.
     */
    public final synchronized int contextSize() {
        return context != null ? context.size() : 0;
    }

    /**
     * Checks if the context is empty.
     */
    public final synchronized boolean isContextEmpty() {
        return context == null || context.isEmpty();
    }

    /**
     * @return  A safe immutable copy of the current context.
     */
    public synchronized ImmutableOpenMap<Object, Object> getContext() {
        return context != null ? ImmutableOpenMap.copyOf(context) : ImmutableOpenMap.of();
    }

    /**
     * Copies the context from the given context holder to this context holder. Any shared keys between
     * the two context will be overridden by the given context holder.
     */
    public synchronized void copyContextFrom(ContextHolder other) {
        synchronized (other) {
            if (other.context == null) {
                return;
            }
            if (context == null) {
                context = new ObjectObjectOpenHashMap<>(other.context);
            } else {
                context.putAll(other.context);
            }
        }
    }
}


! remoteAddress - called by

transport.netty.MessageChannelHandler
    ...
    protected void handleResponse(Channel channel, StreamInput buffer, final TransportResponseHandler handler) {
        final TransportResponse response = handler.newInstance();
        response.remoteAddress(new InetSocketTransportAddress((InetSocketAddress) channel.getRemoteAddress()));
        response.remoteAddress();
        ...
    }
    ...
    protected String handleRequest(Channel channel, StreamInput buffer, long requestId, Version version) throws IOException {
        final String action = buffer.readString();

        final NettyTransportChannel transportChannel = new NettyTransportChannel(transport, action, channel, requestId, version);
        try {
            final TransportRequestHandler handler = transportServiceAdapter.handler(action, version);
            if (handler == null) {
                throw new ActionNotFoundTransportException(action);
            }
            final TransportRequest request = handler.newInstance();
            request.remoteAddress(new InetSocketTransportAddress((InetSocketAddress) channel.getRemoteAddress()));
            request.readFrom(buffer);
            ...
        } catch (Throwable e) {
            ...
        }
        return action;
    }
}

