; (let [x 1] (swank.core/break)) -> slime-fancy


swank-clojure\src\swank\commands\basic.clj


(defn- clean-windows-path [#^String path]
  ;; Decode file URI encoding and remove an opening slash from
  ;; /c:/program%20files/... in jar file URLs and file resources.
  (or (and (.startsWith (System/getProperty "os.name") "Windows")
           (second (re-matches #"^/([a-zA-Z]:/.*)$" path)))
      path))


(defn- slime-zip-resource [#^java.net.URL resource]
  (let [jar-connection #^java.net.JarURLConnection (.openConnection resource)
        jar-file (.getPath (.toURI (.getJarFileURL jar-connection)))]
    (list :zip (clean-windows-path jar-file) (.getEntryName jar-connection))))

(defn- slime-file-resource [#^java.net.URL resource]
  (list :file (clean-windows-path (.getFile resource))))




caution: filename not matched:  "clojure/core.clj"


(:emacs-rex
 (swank:find-definitions-for-emacs "println")
 "myprj.core" t 4)
(:return
 (:ok
  (("(defn println)"
    (:location
     (:zip "D:/dev/Clojure/prj/myprj/lib/clojure-1.2.0.jar" "clojure/core.clj")
     (:line 2865)
     nil))))
 4)


emacs windows zip "caution: filename not matched:"

http://web.archiveorange.com/archive/v/UcW9CERUAfsCRJzpBo7s

I also had this problem. Following the lead of Dmitry I solved it by
changing archive-zip-extract in arc-mode.el to:

(defun archive-zip-extract (archive name)
  (if (member-ignore-case (car archive-zip-extract) '("pkunzip"
"pkzip"))
      (archive-*-extract archive name archive-zip-extract)
    (archive-extract-by-stdout
     archive
     ;; unzip expands wildcards in NAME, so we need to quote it.
     ;; FIXME: Does pkunzip need similar treatment?
     (if (and (not w32-quote-process-args) ;; <----
              (equal (car archive-zip-extract) "unzip")
              )
	 (shell-quote-argument name)
       name)
     archive-zip-extract)))
