https://github.com/DanBurton/Blog.git

http://unknownparallel.wordpress.com/2012/07/24/pipes-to-conduits-part-0-combining-functors/
Fun.lhs

A Functor in Haskell is a type of kind f :: * -> *, which supports the operation fmap :: (a -> b) -> f a -> f b. Many "container" types are Functors, including the List type. But we’re not going to talk about "containers", per se. We’re going to explore a few of the simplest functors that we can squeeze out of the Haskell type system. Of course, I don’t know the actual name of some of these, so you’ll have to forgive me for giving them pet names instead.

Our end goal in exporing these functors is to reproduce the Conduit library by assembling pieces of it, one functor at a time. For this post, we’re just going to survey various functors, and ways to compose them. I’ll also touch lightly on how they play with the Free Monad Transformer, though serious discussion of such will be left to later posts.

> {-# LANGUAGE TypeOperators #-}
> {-# OPTIONS_GHC -Wall #-}
> 
> module Fun where



The Empty functor

> data Empty next = Empty

The Empty functor contains no information. It admits the type variable, but is otherwise nothing but the trivial value, ().

> instance Functor Empty where
>   fmap _f Empty = Empty

When used with the Free Monad Transformer, the Empty functor allows you to short-circuit computation. The Free Monad Transformer works by stacking functors up, but as you can see, the Empty functor has no room for other functors to live inside of it.



The Const functor - is the heart of yield-functionality:

> newtype Const a next = Const a

> instance Functor (Const a) where
>   fmap _f (Const a) = Const a

The (a ->) functor - is the heart of the await-functionality:

> newtype Fun a next = Fun (a -> next)

> instance Functor (Fun a) where
>   fmap f (Fun g) = Fun (\x -> f (g x))



Composing functors

> newtype (f :.: g) x = Composed (f (g x))

Functors can be composed, and the result is a functor.

> instance (Functor f, Functor g) => Functor (f :.: g) where
>    fmap f (Composed x) = Composed $ fmap (fmap f) x

We won't use this in the future for pipes/conduits here.



Combining functors (tagged union):

> infixl 5 :|:
> data (f :|: g) x = L (f x) | R (g x)

If I have two functors f and g, then their tagged union is also a functor. We can just tag the f x values with L and the g x values with R so that whenever we come across some data, we know which of the two functors it actually was.

By case analysis, we can make a tagged union of functors also be a functor:

> instance (Functor f, Functor g) => Functor (f :|: g) where
>   fmap f (L x) = L (fmap f x)
>   fmap f (R x) = R (fmap f x)


> instance (Functor f, Functor g) => Functor (f :|: g) where
>   fmap f (L x) = L (fmap f x)
>   fmap f (R x) = R (fmap f x)



Combining functors (product)

> infixl 7 :&:
> data (f :&: g) x = f x :&: g x

If I have two functors f and g, then their product is also a functor: just perform the fmap on them both simultaneously.

> instance (Functor f, Functor g) => Functor (f :&: g) where
>   fmap f (l :&: r) = fmap f l :&: fmap f r

Similar to how in Haskell you can provide multiple pieces of data to a constructor, we can use :&: to bundle information together.

type Cons a = Const a :&: Identity
type Nil = Empty
type ListF a = Nil :|: Cons a
type List a = FreeT (ListF a)


