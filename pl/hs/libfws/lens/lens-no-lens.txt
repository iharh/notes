{-# LANGUAGE RankNTypes -#}

import Control.Applicative
import Data.Functor.Identity

type Lens  s t a b = forall f. Functor f => (a -> f b) -> s -> f t
type Lens' s   a   = forall f. Functor f => (a -> f a) -> s -> f s

_2 :: Lens (c,a) (c,b) a b
_2 f (c, a) = (,) c <$> f a

-- :t _2
-- _2 :: Functor f => (a -> f b) -> (c, a) -> f (c, b)

view :: ((a -> Const a b) -> s -> Const a t) -> s -> a
view l s = getConst (l Const s)

over :: ((a -> Identity b) -> s -> Identity t) -> (a -> b) -> s -> t
over l f = runIdentity . l (Identity . f)

-- this works with with all lens stuff

infixr 8 ^.
s ^.l = view l s

-- ("hello", ("world", "!!!"))^._2._2
-- "!!!"

--type Lens  s t a b = forall f. Functor f => (a -> f b) -> s -> f t
type Traversal  s t a b = forall f. Applicative f => (a -> f b) -> s -> f t

both :: Traversal (a, a) (b, b) a b
both f (a, b) = (,) <$> f a <*> f b


-- prisms

--   type Lens s t a b = forall f. Functor     f => (a -> f b) -> s -> f t
type Traversal s t a b = forall f. Applicative f => (a -> f b) -> s -> f t

-- prism can be used to build and to match

-- (s -> a, (s, b) -> t)
-- exists c. s <-->        (c, a)
-- exists c. s <--> Either (c, a)

>>>:m +Control.Lens
>>> _Left # 4
Left 4

>>> _Left._Left # 4
Left (Left 4)

>>> Left (Left 4) ^? _Left._Left
Just 4

>>> preview (_Left.Left) (Left (Left 4))
Just 4
>>> preview (_Left.Left) (Left (Right 4))
Nothing

>>> (Left (Right 4)) & _Left._Right +~ 1
Left (Right 5)
--
-- x & f = f x

>>> (Left (Left 4)) & _Left._Right +~ 1
Left (Left 4)
--
-- failed to match

>>> failover (_Left._Left) (+1) (Left (Left 5))
Left (Left 6)

