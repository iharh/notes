// kotlin

val pubCfg by configurations.creating

dependencies {
    //pubCfg("org.eclipse.jgit:org.eclipse.jgit:4.9.2.201712150930-r")
    pubCfg(project(":p1"))
    pubCfg(project(":p2"))
}

abstract class DependencyGraphWalk: DefaultTask() {
    @get:Input
    abstract val dependencies: Property<ResolvableDependencies>

    @TaskAction
    fun walk() {
        val resolutionResult: ResolutionResult = dependencies.get().getResolutionResult()
        val root: ResolvedComponentResult = resolutionResult.getRoot()
        traverseDependencies(0, root.getDependencies())
    }

    private fun traverseDependencies(level: Int, results: Set<DependencyResult>) {
        results.forEach { result ->
            if (result is ResolvedDependencyResult) {
                val componentResult: ResolvedComponentResult = result.getSelected()
                val componentIdentifier: ComponentIdentifier = componentResult.getId()
                val node: String = "${calculateIndentation(level)}- ${componentIdentifier.getDisplayName()} (${componentResult.getSelectionReason()})"
                logger.quiet(node)
                traverseDependencies(level + 1, componentResult.getDependencies())
            }
        }
    }

    private fun calculateIndentation(level: Int) = "     ".repeat(level)
}

tasks.register<DependencyGraphWalk>("walkDependencyGraph") {
    dependencies.set(pubCfg.getIncoming())
}

abstract class ResolveScmTask: DefaultTask() {
    @get:Input
    abstract val resolvedCfg: Property<ResolvedConfiguration>

    @TaskAction
    fun walk() {
        val resolvedArtifacts: Set<ResolvedArtifact> = resolvedCfg.get().getResolvedArtifacts()
        resolvedArtifacts.forEach { result: ResolvedArtifact ->
            // cls: ${result.getClassifier()}"
            logger.quiet("name: ${result.getName()} type: ${result.getType()} ext: ${result.getExtension()}") 
            val mvId: ModuleVersionIdentifier = result.getModuleVersion().getId()
            logger.quiet("grp: ${mvId.getGroup()} name: ${mvId.getName()} ver: ${mvId.getVersion()}")
        }
    }
}

tasks.register<ResolveScmTask>("resolveScm") {
    resolvedCfg.set(pubCfg.getResolvedConfiguration())
}



// groovy
configurations {
    javacpp
}

dependencies {
    javacpp libraries.javacpp
}

task abc {
    javaexec {
        classpath = files(configurations.javacpp.asPath)
    }
    doLast {
        def collectedFileNames = configurations.compile.collect { it.getAbsoluteFile() }.join(pathSep.toString()) // getName
        println "Hello ${collectedFileNames}"
    }
}    
