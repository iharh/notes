options.txt
src\main\java\org\gradle\nativeplatform\toolchain\internal\msvcpp\VisualCppOptionsFileArgsWriter.java

class VisualCppOptionsFileArgsWriter extends OptionsFileArgsWriter {
    public VisualCppOptionsFileArgsWriter(File tempDir) {
        super(tempDir);
    }

    @Override
    protected List<String> transformArgs(List<String> originalArgs, File tempDir) {
        return ArgWriter.argsFileGenerator(new File(tempDir, "options.txt"), ArgWriter.windowsStyleFactory()).transform(originalArgs);
    }
}

public class OptionsFileArgsWriter implements Action<List<String>> {
    private final File tempDir;

    public OptionsFileArgsWriter(File tempDir) {
        this.tempDir = tempDir;
    }

    @Override
    public void execute(List<String> args) {
        List<String> originalArgs = Lists.newArrayList(args);
        args.clear();
        args.addAll(transformArgs(originalArgs, tempDir));
    }

    protected List<String> transformArgs(List<String> originalArgs, File tempDir) {
        return originalArgs;
    }
}

class VisualCppNativeCompiler<T extends NativeCompileSpec> extends NativeCompiler<T> {

    VisualCppNativeCompiler(BuildOperationExecutor buildOperationExecutor, CompilerOutputFileNamingSchemeFactory compilerOutputFileNamingSchemeFactory, CommandLineToolInvocationWorker commandLineToolInvocationWorker, CommandLineToolContext invocationContext, ArgsTransformer<T> argsTransformer, Transformer<T, T> specTransformer, String objectFileExtension, boolean useCommandFile) {
        super(buildOperationExecutor, compilerOutputFileNamingSchemeFactory, commandLineToolInvocationWorker, invocationContext, argsTransformer, specTransformer, objectFileExtension, useCommandFile);
    }

    @Override
    protected List<String> getOutputArgs(File outputFile) {
        // MSVC doesn't allow a space between Fo and the file name
        return Collections.singletonList("/Fo" + outputFile.getAbsolutePath());
    }

    @Override
    protected void addOptionsFileArgs(List<String> args, File tempDir) {
        OptionsFileArgsWriter writer = new VisualCppOptionsFileArgsWriter(tempDir); // !!!
        // modifies args in place
        writer.execute(args);
    }

    @Override
    protected List<String> getPCHArgs(T spec) {
        List<String> pchArgs = new ArrayList<String>();
        if (spec.getPreCompiledHeader() != null && spec.getPreCompiledHeaderObjectFile() != null) {
            String lastHeader = spec.getPreCompiledHeader();

            pchArgs.add("/Yu".concat(lastHeader));
            pchArgs.add("/Fp".concat(spec.getPreCompiledHeaderObjectFile().getAbsolutePath()));
        }
        return pchArgs;
    }
}


public abstract class NativeCompiler<T extends NativeCompileSpec> implements Compiler<T> {
    private final CommandLineToolInvocationWorker commandLineToolInvocationWorker;
    private final ArgsTransformer<T> argsTransformer;
    private final Transformer<T, T> specTransformer;
    private final CommandLineToolContext invocationContext;
    private final String objectFileExtension;
    private final boolean useCommandFile;
    private final Logger logger = Logging.getLogger(NativeCompiler.class);

    private final BuildOperationExecutor buildOperationExecutor;
    private final CompilerOutputFileNamingSchemeFactory compilerOutputFileNamingSchemeFactory;

    public NativeCompiler(BuildOperationExecutor buildOperationExecutor, CompilerOutputFileNamingSchemeFactory compilerOutputFileNamingSchemeFactory, CommandLineToolInvocationWorker commandLineToolInvocationWorker, CommandLineToolContext invocationContext, ArgsTransformer<T> argsTransformer, Transformer<T, T> specTransformer, String objectFileExtension, boolean useCommandFile) {
        this.compilerOutputFileNamingSchemeFactory = compilerOutputFileNamingSchemeFactory;
        this.invocationContext = invocationContext;
        this.objectFileExtension = objectFileExtension;
        this.useCommandFile = useCommandFile;
        this.argsTransformer = argsTransformer;
        this.specTransformer = specTransformer;
        this.commandLineToolInvocationWorker = commandLineToolInvocationWorker;
        this.buildOperationExecutor = buildOperationExecutor;
    }

    ...
    protected List<String> getArguments(T spec) {
        List<String> args = argsTransformer.transform(spec); // !!! get args here

        Action<List<String>> userArgTransformer = invocationContext.getArgAction();
        // modifies in place
        userArgTransformer.execute(args);

        if (useCommandFile) {
            // Shorten args and write out an options.txt file
            // This must be called only once per execute()
            addOptionsFileArgs(args, spec.getTempDir());
        }
        return args;
    }

    protected List<String> getSourceArgs(File sourceFile) {
        return Collections.singletonList(sourceFile.getAbsolutePath());
    }

    protected abstract List<String> getOutputArgs(File outputFile);

    protected abstract void addOptionsFileArgs(List<String> args, File tempDir);

    protected abstract List<String> getPCHArgs(T spec);
    ...
}

public interface ArgsTransformer<T extends BinaryToolSpec> extends Transformer<List<String>, T> {
}

abstract class VisualCppCompilerArgsTransformer<T extends NativeCompileSpec> implements ArgsTransformer<T> {
    @Override
    public List<String> transform(T spec) { // !!! compile args for msvc
        List<String> args = Lists.newArrayList();
        addToolSpecificArgs(spec, args);
        addMacroArgs(spec, args);
        addUserArgs(spec, args);
        addIncludeArgs(spec, args);
        return args;
    }

    private void addUserArgs(T spec, List<String> args) {
        args.addAll(escapeUserArgs(spec.getAllArgs()));
    }

    protected void addToolSpecificArgs(T spec, List<String> args) {
        args.add(getLanguageOption());
        args.add("/nologo");
        args.add("/c");
    }

    protected void addIncludeArgs(T spec, List<String> args) {
        for (File file : spec.getIncludeRoots()) { // !!!
            args.add("/I" + file.getAbsolutePath());
        }
    }

    protected void addMacroArgs(T spec, List<String> args) {
        for (String macroArg : new MacroArgsConverter().transform(spec.getMacros())) {
            args.add(escapeUserArg("/D" + macroArg));
        }
    }

    /**
     * Returns compiler specific language option
     * @return compiler language option or empty string if the language does not require it
     */
    protected String getLanguageOption() {
        return "";
    }
}

package org.gradle.nativeplatform.toolchain.internal.msvcpp;
...
import org.gradle.nativeplatform.toolchain.internal.compilespec.CCompileSpec;

class CCompiler extends VisualCppNativeCompiler<CCompileSpec> {

    CCompiler(BuildOperationExecutor buildOperationExecutor, CompilerOutputFileNamingSchemeFactory compilerOutputFileNamingSchemeFactory, CommandLineToolInvocationWorker commandLineToolInvocationWorker, CommandLineToolContext invocationContext, Transformer<CCompileSpec, CCompileSpec> specTransformer, String objectFileExtension, boolean useCommandFile) {
        super(buildOperationExecutor, compilerOutputFileNamingSchemeFactory, commandLineToolInvocationWorker, invocationContext, new CCompilerArgsTransformer(), specTransformer, objectFileExtension, useCommandFile);
    }

    private static class CCompilerArgsTransformer extends VisualCppCompilerArgsTransformer<CCompileSpec> {
        @Override
        protected String getLanguageOption() {
            return "/TC";
        }
    }
}

package org.gradle.nativeplatform.toolchain.internal.compilespec;

import org.gradle.nativeplatform.toolchain.internal.NativeCompileSpec;

public interface CCompileSpec extends NativeCompileSpec {
}


// <- getIncludeRoots

package org.gradle.language.nativeplatform.internal;

public abstract class AbstractNativeCompileSpec extends AbstractBinaryToolSpec implements NativeCompileSpec {

    private List<File> includeRoots = new ArrayList<File>();
    ...
    @Override
    public List<File> getIncludeRoots() {
        return includeRoots;
    }

    @Override
    public void include(File... includeRoots) {
        Collections.addAll(this.includeRoots, includeRoots);
    }

    @Override
    public void include(Iterable<File> includeRoots) {
        addAll(this.includeRoots, includeRoots);
    }
    ...
}
