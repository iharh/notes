https://github.com/gradle/gradle/tree/master/subprojects/platform-native/src/main/java/org/gradle/nativeplatform/toolchain
    https://docs.gradle.org/current/dsl/org.gradle.nativeplatform.toolchain.VisualCpp.html
    windowsSdkDir


language-native
native-platform

https://github.com/gradle/gradle/blob/master/subprojects/platform-native/src/main/java/org/gradle/nativeplatform/toolchain/VisualCpp.java
@Incubating
public interface VisualCpp extends NativeToolChain {
    /**
     * The directory where Visual Studio or Visual C++ is installed.
     */
    File getInstallDir();

    /**
     * The directory where Visual Studio or Visual C++ is installed.
     */
    void setInstallDir(Object installDir);

    /**
     * The directory where Windows SDK is installed.
     */
    File getWindowsSdkDir();

    /**
     * The directory where Windows SDK is installed.
     */
    void setWindowsSdkDir(Object installDir);
        // ??? usages

    /**
     * Adds an action that can fine-tune the tool configuration for each platform supported by this tool chain.
     */
    void eachPlatform(Action<? super VisualCppPlatformToolChain> action);
}


/**
 * Registers the standard tool chains.
 */
public class StandardToolChainsPlugin implements Plugin<Project> {
    @Override
    public void apply(Project project) {
        project.getPluginManager().apply(MicrosoftVisualCppCompilerPlugin.class);
        project.getPluginManager().apply(GccCompilerPlugin.class);
        project.getPluginManager().apply(ClangCompilerPlugin.class);
    }
}

@Incubating
public class MicrosoftVisualCppCompilerPlugin implements Plugin<Project> {

    @Override
    public void apply(Project project) {
        project.getPluginManager().apply(NativeComponentPlugin.class);
    }

    static class Rules extends RuleSource {
        @Defaults
        public static void addToolChain(NativeToolChainRegistryInternal toolChainRegistry, ServiceRegistry serviceRegistry) {
            final FileResolver fileResolver = serviceRegistry.get(FileResolver.class);
            final ExecActionFactory execActionFactory = serviceRegistry.get(ExecActionFactory.class);
            final Instantiator instantiator = serviceRegistry.get(Instantiator.class);
            final OperatingSystem operatingSystem = serviceRegistry.get(OperatingSystem.class);
            final BuildOperationExecutor buildOperationExecutor = serviceRegistry.get(BuildOperationExecutor.class);
            final CompilerOutputFileNamingSchemeFactory compilerOutputFileNamingSchemeFactory = serviceRegistry.get(CompilerOutputFileNamingSchemeFactory.class);
            final VisualStudioLocator visualStudioLocator = serviceRegistry.get(VisualStudioLocator.class);
            final UcrtLocator ucrtLocator = serviceRegistry.get(UcrtLocator.class);
            final WindowsSdkLocator windowsSdkLocator = serviceRegistry.get(WindowsSdkLocator.class);

            toolChainRegistry.registerFactory(VisualCpp.class, new NamedDomainObjectFactory<VisualCpp>() {
                public VisualCpp create(String name) {
                return instantiator.newInstance(VisualCppToolChain.class, name, buildOperationExecutor, operatingSystem, fileResolver, execActionFactory, compilerOutputFileNamingSchemeFactory, visualStudioLocator, windowsSdkLocator, ucrtLocator, instantiator);
                }
            });
            toolChainRegistry.registerDefaultToolChain(VisualCppToolChain.DEFAULT_NAME, VisualCpp.class);
        }

    }
}

/core

public interface PluginManagerInternal extends PluginManager {
    void apply(PluginImplementation<?> plugin);

    <P extends Plugin> P addImperativePlugin(PluginImplementation<P> plugin);

    <P extends Plugin> P addImperativePlugin(Class<P> plugin);

    PluginContainer getPluginContainer();

    DomainObjectSet<PluginWithId> pluginsForId(String id);

    class PluginWithId {
        final PluginId id;
        final Class<?> clazz;

        public PluginWithId(PluginId id, Class<?> clazz) {
            this.id = id;
            this.clazz = clazz;
        }

        AppliedPlugin asAppliedPlugin() {
            return new DefaultAppliedPlugin(id);
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) {
                return true;
            }
            if (o == null || getClass() != o.getClass()) {
                return false;
            }

            PluginWithId that = (PluginWithId) o;

            return clazz.equals(that.clazz) && id.equals(that.id);
        }

        @Override
        public int hashCode() {
            int result = id.hashCode();
            result = 31 * result + clazz.hashCode();
            return result;
        }
    }
}

