https://github.com/gradle/native-samples/tree/master/cpp/injected-plugins


settings.gradle
---------------
rootProject.name = 'app'

includeBuild('plugins')

sourceControl {
    gitRepository("repos/utilities-library") {
        producesModule("org.gradle.cpp-samples:utilities")
        plugins {
            id "utilities-build"
        }
    }
    gitRepository("repos/list-library") {
        producesModule("org.gradle.cpp-samples:list")
        plugins {
            id "list-build"
        }
    }
}


README
------
## Application uses libraries that are not built by Gradle (injected-plugins)

Gradle can also consume source dependencies that come from repositories without Gradle builds. When declaring a source dependency's repository information, you can instruct Gradle to inject plugins into the source dependency. These plugins can configure a Gradle build based on the contents of the repository.

### C++

To use the sample, create the Git repositories containing the libraries:

```
> cd cpp/injected-plugins
> ./gradlew -p ../.. generateRepos
```

Now build the application:

```
> ./gradlew assemble

BUILD SUCCESSFUL in 1s

> ./build/install/main/debug/app
Hello, World!
```

In the "repos" directory, you can find the source code without any Gradle configuration. The `utilities` and `list` builds are configured with the `utilities-build` and `list-build` plugins.
